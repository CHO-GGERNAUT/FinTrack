-- This file is automatically generated by the migration tool.
CREATE TABLE IF NOT EXISTS cards (
    id UUID PRIMARY KEY,

    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    deleted_at TIMESTAMPTZ,

    last_4_digits SMALLINT NOT NULL,
    encrypted_card_number BYTEA NOT NULL

    card_type TEXT NOT NULL CHECK (card_type IN ('Credit', 'Debit')),
    international_network TEXT NOT NULL CHECK (international_network IN ('Visa', 'Mastercard', 'AmericanExpress', 'Discover', 'JCB')),
    network TEXT NOT NULL CHECK (network IN ('Samsung', 'BC', 'Woori', 'Hana', 'Shinhan', 'Hyundai', 'KB', 'Lotte', 'NH')),
    issue_date DATE NOT NULL,
    valid_from DATE NOT NULL,
    cvc SMALLINT NOT NULL,
    
    card_owner UUID REFERENCES users(id),
    meta_data JSONB,
);


CREATE TABLE IF NOT EXISTS categories (
    id SERIAL PRIMARY KEY,

    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    deleted_at TIMESTAMPTZ,

    name TEXT NOT NULL,
    path LTREE NOT NULL,
);

CREATE TABLE IF NOT EXISTS merchants (
    id UUID PRIMARY KEY,

    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    deleted_at TIMESTAMPTZ,

    name TEXT NOT NULL,
    business_number VARCHAR(10) NOT NULL UNIQUE,

);

CREATE TABLE IF NOT EXISTS card_transactions (
    id UUID PRIMARY KEY,

    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    deleted_at TIMESTAMPTZ,

    amount INTEGER NOT NULL,
    approved_at TIMESTAMPTZ NOT NULL,
    memo TEXT,
    transaction_type TEXT NOT NULL CHECK (transaction_type IN ('Refund', 'LumpSum', 'Installment')),
    installment_months SMALLINT


    card_id UUID REFERENCES cards(id),
    merchant_id UUID REFERENCES merchants(id),
    category_id INTEGER REFERENCES categories(id),
    
);

CREATE TABLE IF NOT EXISTS users (
    id UUID PRIMARY KEY,

    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    deleted_at TIMESTAMPTZ

    name TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    password TEXT NOT NULL,
);


CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = NOW();
   RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_updated_at
BEFORE UPDATE ON cards
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_updated_at
BEFORE UPDATE ON categories
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_updated_at
BEFORE UPDATE ON merchants
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_updated_at
BEFORE UPDATE ON card_transactions
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER set_updated_at
BEFORE UPDATE ON users
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();